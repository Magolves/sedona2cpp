package sedonac.steps.cpp;

import sedonac.Compiler;
import sedonac.CompilerStep;
import sedonac.ast.Block;
import sedonac.ast.MethodDef;
import sedonac.ast.Stmt;
import sedonac.ast.TypeDef;
import sedonac.namespace.Method;
import sedonac.namespace.Slot;
import sedonac.translate.TranslationUtil;

import static sedonac.translate.TranslationUtil.NO_FACETS;
import static sedonac.translate.TranslationUtil.NO_PARAMETERS;

public class AddDestructors extends CompilerStep {
    int count = 0;


    public AddDestructors(Compiler compiler) {
        super(compiler);
    }

    @Override
    public void run() {
        log.debug("  AddVirtualDestructor");
        walkAst(WALK_TO_TYPES);
        quitIfErrors();
        log.debug("  AddVirtualDestructor [Summoned " + count + " destructors]");
    }

    @Override
    public void enterType(TypeDef t) {
        super.enterType(t);
        if (TranslationUtil.hasVirtualMethods(t)  || t.base != null) {
            // Assemble code
            Block code = new Block(t.loc);
            Stmt.Return retStmt = new Stmt.Return(t.loc);
            code.stmts.add(retStmt);

            MethodDef slot = new MethodDef(t.loc, t, Slot.PUBLIC, Method.INSTANCE_DESTROY, NO_FACETS, ns.voidType, NO_PARAMETERS, code);
            slot.doc = "Destructor (generated by translation)";

            t.addSlot(slot);
            ++count;
        }
    }
}
